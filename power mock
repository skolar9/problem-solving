https://www.oodlestechnologies.com/blogs/How-To-Unit-Test-A-Get-REST-Service-Using-Mockito-With-JUnit/

---> doAnswer   && doThrow

@Test
public void testUpdate() {

    doAnswer(new Answer<Void>() {
//test
        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            Object[] arguments = invocation.getArguments();
            if (arguments != null && arguments.length > 1 && arguments[0] != null && arguments[1] != null) {

                Customer customer = (Customer) arguments[0];
                String email = (String) arguments[1];
                customer.setEmail(email);

            }
            return null;
        }
    }).when(daoMock).updateEmail(any(Customer.class), any(String.class));

    // calling the method under test
    Customer customer = service.changeEmail("old@test.com", "new@test.com");

    //some asserts
    assertThat(customer, is(notNullValue()));
    assertThat(customer.getEmail(), is(equalTo("new@test.com")));

}

@Test(expected = RuntimeException.class)
public void testUpdate_throwsException() {

    doThrow(RuntimeException.class).when(daoMock).updateEmail(any(Customer.class), any(String.class));

    // calling the method under test
    Customer customer = service.changeEmail("old@test.com", "new@test.com");

}
}




package com.test.springboot.hibernate.services;


import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.beans.factory.annotation.Autowired;

import com.test.springboot.hibernate.dto.EmployeeDto;
import com.test.springboot.hibernate.entity.Employee;
import com.test.springboot.hibernate.service.EmployeeService;
import com.test.springboot.hibernate.utils.ObjectMapperUtils;


@RunWith(PowerMockRunner.class)
@PrepareForTest(fullyQualifiedNames = {"com.test.springboot.hibernte.service.*","com.test.springboot.hibernate.utils.*"})
public class EmployeeServiceTest {
	
	@Autowired
	EmployeeService empservice;
	@Test
	public void testStatic() {
		Employee e = new Employee();
		e.setEmpId(new Long(1));
		e.setDepartment("cse");
		e.setName("sreekanth");
		e.setSalary(new Long(123132));
		 PowerMockito.mockStatic(ObjectMapperUtils.class); 
		 EmployeeDto ed = new EmployeeDto();
		 ed.setEmpId(new Long(1));
		 ed.setDepartment("cse");
		 ed.setName("sreekanth");
		 ed.setSalary(new Long(123132));
		 PowerMockito.when(ObjectMapperUtils.map(ed,Employee.class)).thenReturn(e); 
		 Employee e1 = empservice.insert1(ed);
		 Assert.assertEquals(e, e1);
	}
	
	@Test
	public void testPrivate() throws Exception {

	    EmployeeService mock = PowerMockito.spy(empservice);
	    PowerMockito.doReturn(1L).when(mock, "method");
	  
	    Employee e = new Employee();
		e.setEmpId(new Long(1));
		e.setDepartment("cse");
		e.setName("sreekanth");
		e.setSalary(new Long(123132));
		 PowerMockito.mockStatic(ObjectMapperUtils.class); 
		 EmployeeDto ed = new EmployeeDto();
		 ed.setEmpId(new Long(1));
		 ed.setDepartment("cse");
		 ed.setName("sreekanth");
		 ed.setSalary(new Long(123132));
		 PowerMockito.when(ObjectMapperUtils.map(ed,Employee.class)).thenReturn(e); 
		 Employee e1 = empservice.insert1(ed);
		 Assert.assertEquals(e, e1);
	}

}
